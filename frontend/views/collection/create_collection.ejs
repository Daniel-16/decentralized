<%- include('../partials/header') %>
<!-- style for modal and its form -->
<style>
    /* Modal styles */
    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgba(0, 0, 0, 0.5); /* Black with opacity */
    }

    /* Modal Content Box */
    .modal-content {
        background-color: #fefefe;
        margin: 10% auto; /* Centered with less top margin */
        padding: 20px;
        border-radius: 8px; /* Rounded corners */
        border: 1px solid #888;
        width: 50%; /* Reduced width */
        max-width: 400px; /* Maximum width for the modal */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Light shadow */
    }

    /* Close Button */
    .close-button {
        color: #aaa;
        float: right;
        font-size: 24px;
        font-weight: bold;
    }

    .close-button:hover,
    .close-button:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }

    /* Form styles */
    #transferForm {
        display: flex;
        flex-direction: column; /* Stack items vertically */
    }

    #transferForm label {
        margin-bottom: 5px; /* Space between label and input */
        font-weight: bold; /* Make labels bold */
    }

    #transferForm input {
        margin-bottom: 15px; /* Space between inputs */
        padding: 8px; /* Padding for input fields */
        font-size: 16px; /* Larger font size */
        border: 1px solid #ccc; /* Border for input fields */
        border-radius: 4px; /* Rounded corners for inputs */
    }

    #transferForm button {
        padding: 10px;
        font-size: 16px;
        background-color: #d9534f; /* Button color */
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    #transferForm button:hover {
        background-color: #c9302c; /* Darker button color on hover */
    }
</style>
<!-- end: style for modal and its form -->

<style>

    h1 {
        text-align: center;
        color: #333;
    }

    #create-collection-form {
        /* background-color: #fff; */
        border-radius: 8px;
        padding: 10px;
        /* box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); */
        max-width: 500px;
        width: 100%;
    }

    label {
        display: block;
        margin-bottom: 8px;
        font-weight: bold;
        color: #555;
    }

    input[type="text"],
    textarea {
        width: calc(100% - 22px);
        padding: 10px;
        margin-bottom: 15px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 14px;
    }

    textarea {
        height: 100px;
        resize: none;
    }

    button {
        width: 100%;
        padding: 10px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 16px;
        cursor: pointer;
    }

    button:hover {
        background-color: #45a049;
    }

    #response {
        margin-top: 20px;
        text-align: center;
        font-size: 16px;
        color: #333;
    }

    .error {
        color: red;
    }

    .success {
        color: green;
    }
</style>
<div class="top-area">
    <div class="grid_frame">
        <div class="container_grid clearfix">
            <div class="grid_12">
                <h2 class="page-title">Collections</h2>
            </div>
        </div>
    </div>
</div>
<div class="grid_frame page-content">
    <div class="container_grid">
        <div class="mod-brand-detail-4 clearfix">
            <div class="grid_12">
                <div class="brand-top-info clearfix">
                    <div class="brand-logo">
                        <div class="img-thumb-center">
                            <div class="wrap-img-thumb">
                                <span class="ver_hold"></span>
                                
                                <a href="#" class="ver_container"><h1>KooponCraft</h1></a>
                            </div>
                        </div>
                        <!-- <i class="stick-lbl trust-brand-b"></i> -->
                    </div>
                    <div class="brand-desc">
                        <div class="title-desc">Create A Collection and Token</div>
                        <div>
                            <hr>
                                <h1>Collection Details</h1>
                                <hr>
                            <form id="create-collection-form">
                                <label for="mnemonic">Mnemonic (Secret Phrase): <span style="color: red;">*</span></label>
                                <textarea id="mnemonic" name="mnemonic" required></textarea>

                                <label for="name">Collection Name:<span style="color: red;">*</span></label>
                                <input type="text" id="name" name="name" required>

                                <label for="description">Collection Description:<span style="color: red;">*</span></label>
                                <input type="text" id="description" name="description" required>

                                <hr>
                                <h1>Token Details</h1>
                                <hr>

                                <label for="tokenPrefix">Token Prefix:<span style="color: red;">*</span></label>
                                <input type="text" id="tokenPrefix" name="tokenPrefix" required>

                                <label for="tokenName">Token Name:<span style="color: red;">*</span></label>
                                <input type="text" id="tokenName" name="tokenName" required>

                                <label for="tokenDescription">Token Description:<span style="color: red;">*</span></label>
                                <input type="text" id="tokenDescription" name="tokenDescription" required>

                                <button type="submit">Create</button>
                            </form>

                            <div id="response"></div>
                        </div>              
                    </div>
                    <div class="right-counter" style="padding-top: 20px;">
                        <div class="wrap-content">
                            <h4 class="note-title"><b>Things to Know About Creating a Collection</b></h4>
                            <ul class="note-list">
                                <li>Your <b>mnemonic</b> is your secret phrase; keep it safe and private.</li>
                                <li>Choose a <b>unique collection name</b> to stand out.</li>
                                <li>Provide a <b>clear description</b> to let others know what your collection is about.</li>
                                <li>The <b>token prefix</b> helps identify your tokens, so choose wisely.</li>
                            </ul>
                            <a class="btn btn-blue btn-follow-brand" href="#">Learn More</a>
                            <!-- <a class="btn btn-blue btn-follow-brand" href="#">Follow brand</a> -->
                        </div>
                    </div>
                </div>
            </div>
            <div class="mod-grp-coupon block">
                <div class="block-content list-coupon clearfix">
                    <h1>My Collections</h1>
                        <div id="collections-container">
                            <!-- appending collections here -->
                        </div>
                    <!--end: .coupon-item -->
                </div>
            </div><!--end block: List Coupons-->
        </div>
    </div>
</div>




<!-- modal for mint -->
<div id="transferModal" class="modal">
    <div class="modal-content">
        <span class="close-button">&times;</span>
        <h2>Mint Token</h2>
        <form id="transferForm">
            <label for="mnemonic">Mnemonic:</label>
            <!-- <input type="text" id="mnemonic" name="mnemonic" required> -->
            <textarea id="mnemonic1" name="mnemonic" required></textarea>

            <label for="collectionId">Collection ID:</label>
            <input type="text" id="collectionId" readonly name="collectionId" required>

            <label for="tokenId">Token Name:</label>
            <input type="text" id="tokenName1" name="tokenName" required>

            <label for="recipient">Token Description: </label>
            <input type="text" id="tokenDescription1" name="tokenDescription" required>

            <button type="submit" class="btn btn-red type-1">Complete Mint</button>
        </form>
    </div>
</div>
<!-- end:modal for mint -->






<%- include('../partials/footer') %>
<!-- store the collection and token -->
<script>
    $(document).ready(function() {
        $('#create-collection-form').submit(function(event) {
            $('#cover-spin').show(0);
            event.preventDefault(); 

            const mnemonic = $('#mnemonic').val();
            const collectionName = $('#name').val();
            const description = $('#description').val();
            const tokenPrefix = $('#tokenPrefix').val();
            const tokenDescription = $('#tokenDescription').val();
            const tokenName = $('#tokenName').val();

            const token = localStorage.getItem('token');

            $.ajax({
                // url: '/api/createCollection',
                url: '/api/createAndMint',
                method: 'POST',
                contentType: 'application/json',
                headers: {
                    Authorization: `Bearer ${token}`,
                },
                data: JSON.stringify({
                    mnemonic: mnemonic,
                    name: collectionName,
                    description: description,
                    tokenPrefix: tokenPrefix,
                    tokenName: tokenName,
                    tokenDescription: tokenDescription
                }),
                success: function(response) {
                    if (response.success) {
                        $('#cover-spin').hide(0);
                        Swal.fire({
                            position: "center",
                            icon: "success",
                            title: response.message,
                            showConfirmButton: false,
                            timer: 1500,
                        });
                        $('#response').html(
                            `
                            <div class="alert">
                            <span class="closebtn" onclick="this.parentElement.style.display='none';">&times;</span>
                            ${response.message} <br> Collection ID: ${response.collectionPayload.collectionId} <br> Token ID: ${response.collectionPayload.tokenId}
                            </div>
                            `
                        )
                        // $('#response').html(`<p class="success">${response.message} <br> Collection ID: ${response.collectionPayload.collectionId} <br> Token ID: ${response.collectionPayload.tokenId} </p>`);
                        location.reload();
                        // auto get the user balance after creating a collection
                        const wallet_address = localStorage.getItem("accountAddress");
                        const apiUrl = `/api/getUserBalance?wallet_address=${wallet_address}`;
                        $.ajax({
                            url: apiUrl,
                            method: "GET",
                            headers: {
                                Authorization: `Bearer ${localStorage.getItem("token")}`,
                            },
                            success: function (response) {
                                if (response.success) {
                                    // console.log("the resp", response);
                                    // update the header with balance information
                                    $("#availableBalance").text(`UNQ${parseFloat(response.availableBalance.amount).toFixed(2)}`);
                                    $("#lockedBalance").text(`UNQ${response.lockedBalance.amount.toLocaleString()}`);
                                    $("#freeBalance").text(`UNQ${response.freeBalance.amount.toLocaleString()}`);
                                } else {
                                    console.error("Failed to fetch user balance:", response.error);
                                }
                            },
                            error: function(jqXHR) {
                                console.log(jqXHR);
                            }
                        });
                    } else {
                        $('#cover-spin').hide(0);
                        $('#response').html(`<p class="error">Error: ${response.error}</p>`);
                    }

                },
                error: function(jqXHR) {
                    $('#cover-spin').hide(0);
                    Swal.fire({
                        position: "center",
                        icon: "error",
                        title: response.message,
                        showConfirmButton: false,
                        timer: 1500,
                    });
                    $('#response').html(`<p class="error">An error occurred: ${jqXHR.responseText}</p>`);
                }
            });
            location.reload();
        });
    });
</script>
<!-- end: store the collection and token -->


<!-- get collections -->
<script>
$(document).ready(function() {
    function fetchUserCollections() {
        const token = localStorage.getItem('token');
        $.ajax({
            url: '/api/getCollections',  
            type: 'GET',
            headers: {
                'Authorization': 'Bearer ' + token
            },
            success: function(response) {
                $('#collections-container').empty();  // remove existing content
                if (response && response.success) {
                    if (response.collections && response.collections.length > 0) {
                        response.collections.forEach(function(collection) {
                            let tokensHtml = '';

                            if (collection.token && collection.token.length > 0) {
                                collection.token.forEach(function(tokenItem) {
                                    tokensHtml += `<div>Token ID: ${tokenItem.substring(0, 10) + '...'}</div>`;
                                });
                            } else {
                                tokensHtml = '<div>No tokens available for this collection.</div>';
                            }

                            const collectionItem = `
                            <div class="coupon-item grid_6">
                                <div class="coupon-content">
                                    <div class="img-thumb-center">
                                        <!-- include an image here if needed -->
                                    </div>
                                    <div class="coupon-price">Collection ID: ${collection.collectionId}</div>
                                    <div class="coupon-brand">${tokensHtml}</div> 
                                    <br>
                                    <a class="btn-discard" href="#" 
                                        data-token-id="${collection.tokenId}" 
                                        data-collection-id="${collection.collectionId}">
                                        Mint New Token
                                    </a>
                                </div>
                            </div>
                            `;

                            $('#collections-container').append(collectionItem);

                            // Attach click event handler for discard buttons
                            $('.btn-discard').on('click', function(e) {
                                e.preventDefault();
                                // Get token ID and collection ID from data attributes
                                const tokenId = $(this).data('token-id');
                                const collectionId = $(this).data('collection-id');
                                // Pre-populate the modal form fields
                                $('#tokenId').val(tokenId);
                                $('#collectionId').val(collectionId);
                                // Show the modal
                                $('#transferModal').fadeIn();
                            });
                        });
                    } else {
                        $('#collections-container').append('<p>No collections created for this user.</p>');
                    }
                } else {
                    console.error('Invalid response format or missing success flag.');
                    $('#collections-container').append('<p>Error fetching collections.</p>');
                }
            },
            error: function(xhr) {
                console.error('An error occurred:', xhr.responseText);
                $('#collections-container').append('<p>Failed to fetch collections. Please try again later.</p>');
            }
        });
    }

    // Call the function to fetch collections
    fetchUserCollections();

    // Close the modal when the close button is clicked
    $('.close-button').on('click', function() {
        $('#transferModal').fadeOut();
    });

    // Close the modal when clicking outside of it
    $(window).on('click', function(event) {
        if (event.target === $('#transferModal')[0]) {
            $('#transferModal').fadeOut();
        }
    });
});
</script>
<!-- end: get collections -->


<!-- modal; -->
<script>
$(document).ready(function() {
    $('#transferForm').on('submit', function(e) {
        e.preventDefault(); 
        $('#cover-spin').show(0);
        
        const formData = {
            mnemonic: $('#mnemonic1').val(),
            collectionId: $('#collectionId').val(),
            tokenName: $('#tokenName1').val(),
            tokenDescription: $('#tokenDescription1').val()
        };

        const token = localStorage.getItem('token');

        $.ajax({
            url: '/api/mintToken', 
            type: 'POST',
            data: JSON.stringify(formData),
            contentType: 'application/json',
            headers: {
                Authorization: `Bearer ${token}`,
            },
            success: function(response) {
                if (response.success) {
                    $('#cover-spin').hide(0);
                    Swal.fire({
                        position: "center",
                        icon: "success",
                        title: response.message,
                        showConfirmButton: false,
                        timer: 1500,
                    });
                    // console.log(response.message)
                    // alert('Token transferred successfully!');
                    $('#transferModal').fadeOut(); 
                    // location.reload();
                } else {
                    $('#cover-spin').hide(0);
                    Swal.fire({
                        position: "center",
                        icon: "success",
                        title: "An error occurred!",
                        showConfirmButton: false,
                        timer: 1500,
                    });
                    console.error('Failed to transfer token:', response.message);
                    // alert('Failed to transfer token: ' + response.message);
                }
                location.reload();
            },
            error: function(xhr) {
                $('#cover-spin').hide(0);
                alert('An error occurred: ' + xhr.responseText);
            }
        });
    });
});
</script>