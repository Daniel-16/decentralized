<%- include('../partials/home/header') %>

<style>
.game-container {
    max-width: 800px;
    margin: 40px auto;
    padding: 20px;
}

.game-board {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 10px;
    margin: 20px 0;
    perspective: 1000px;
}

.card {
    position: relative;
    height: 150px;
    transform-style: preserve-3d;
    transition: transform 0.5s;
    cursor: pointer;
}

.card.flipped {
    transform: rotateY(180deg);
}

.card-face {
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.card-front {
    background: linear-gradient(45deg, #6366f1, #8b5cf6);
    transform: rotateY(180deg);
}

.card-back {
    background: linear-gradient(45deg, #f472b6, #ec4899);
}

.card-content {
    text-align: center;
    color: white;
    padding: 10px;
}

.card-content img {
    width: 10rem;
    height: 10rem;
    object-fit: contain;
    margin-bottom: 5px;
}

.game-stats {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
    font-size: 1.2em;
}

.game-controls {
    text-align: center;
    margin: 20px 0;
}

.confetti {
    position: fixed;
    width: 10px;
    height: 10px;
    background-color: #f472b6;
    animation: fall 3s linear forwards;
    z-index: 1000;
}

@keyframes fall {
    to {
        transform: translateY(100vh) rotate(360deg);
    }
}

.modal-content {
    background: linear-gradient(135deg, #6366f1, #8b5cf6);
    color: white;
}

.modal-header {
    border-bottom: 1px solid rgba(255,255,255,0.1);
}

.modal-footer {
    border-top: 1px solid rgba(255,255,255,0.1);
}
</style>

<div class="breadcrumb-wrapper">
    <div class="container">
        <div class="breadcrumb-content">
            <h2 class="breadcrumb-title">Coupon Match</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb justify-content-center">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item active">Coupon Match Game</li>
                </ol>
            </nav>
        </div>
    </div>
</div>

<div class="game-container">
    <div class="game-stats">
        <div>Moves: <span id="moves">0</span></div>
        <div>Points: <span id="points">0</span></div>
        <div>Time: <span id="timer">00:00</span></div>
    </div>
    
    <div class="game-controls">
        <button class="btn btn-primary rounded-pill" id="startGame">Start New Game</button>
    </div>

    <div class="game-board" id="gameBoard"></div>
</div>

<!-- Victory Modal -->
<div class="modal fade" id="victoryModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Congratulations! 🎉</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>You've completed the Coupon Match game!</p>
                <p>Moves: <span id="finalMoves">0</span></p>
                <p>Time: <span id="finalTime">00:00</span></p>
                <p>Points Earned: <span id="finalPoints">0</span></p>
                <p class="mt-3">Come back tomorrow to play again!</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="window.location.href='/'">Return Home</button>
            </div>
        </div>
    </div>
</div>

<%- include('../partials/home/footer') %>

<script>
class CouponMatchGame {
    constructor() {
        this.moves = 0;
        this.points = 0;
        this.startTime = null;
        this.timerInterval = null;
        this.flippedCards = [];
        this.matchedPairs = 0;
        this.isLocked = false;
        
        // Coupon types for the game
        this.couponTypes = [
            { name: 'Discount', icon: '🏷️', color: '#f472b6' },
            { name: 'Gift Card', icon: '🎁', color: '#8b5cf6' },
            { name: 'Special', icon: '⭐', color: '#f59e0b' },
            { name: 'Sale', icon: '💰', color: '#10b981' },
            { name: 'Premium', icon: '👑', color: '#6366f1' },
            { name: 'Limited', icon: '⚡', color: '#ef4444' },
            { name: 'Bonus', icon: '🎯', color: '#14b8a6' },
            { name: 'Reward', icon: '🏆', color: '#f97316' }
        ];
        
        this.checkCooldown();
        this.attachEventListeners();
    }

    initializeGame() {
        this.gameBoard = document.getElementById('gameBoard');
        this.moves = 0;
        this.points = 0;
        this.matchedPairs = 0;
        this.updateStats();
        this.createBoard();
        this.startTimer();
    }

    createBoard() {
        this.gameBoard.innerHTML = '';
        const shuffledCoupons = [...this.couponTypes, ...this.couponTypes]
            .sort(() => Math.random() - 0.5);

        shuffledCoupons.forEach((coupon, index) => {
            const card = this.createCard(coupon, index);
            this.gameBoard.appendChild(card);
        });
    }

    createCard(coupon, index) {
        const card = document.createElement('div');
        card.className = 'card';
        card.dataset.index = index;
        card.dataset.name = coupon.name;

        card.innerHTML = `
            <div class="card-face card-front">
                <div class="card-content">
                    <div style="font-size: 2em;">${coupon.icon}</div>
                    <div>${coupon.name}</div>
                </div>
            </div>
            <div class="card-face card-back">
                <div class="card-content">
                    <img src="/assets/img/koopon-logo.png" alt="KooponCraft">
                </div>
            </div>
        `;

        card.addEventListener('click', () => this.flipCard(card));
        return card;
    }

    flipCard(card) {
        if (this.isLocked || card.classList.contains('flipped') || 
            this.flippedCards.includes(card)) return;

        card.classList.add('flipped');
        this.flippedCards.push(card);

        if (this.flippedCards.length === 2) {
            this.moves++;
            this.updateStats();
            this.checkMatch();
        }
    }

    checkMatch() {
        this.isLocked = true;
        const [card1, card2] = this.flippedCards;
        const match = card1.dataset.name === card2.dataset.name;

        if (match) {
            this.handleMatch(card1, card2);
        } else {
            this.handleMismatch(card1, card2);
        }

        this.flippedCards = [];
        this.isLocked = false;

        // Check if moves limit reached
        if (this.moves >= 16) {
            this.gameComplete();
        }
    }

    handleMatch(card1, card2) {
        this.matchedPairs++;
        this.points += 100;
        this.updateStats();
        
        this.createConfetti(card1);
        this.createConfetti(card2);

        if (this.matchedPairs === this.couponTypes.length) {
            this.gameComplete();
        }
    }

    handleMismatch(card1, card2) {
        setTimeout(() => {
            card1.classList.remove('flipped');
            card2.classList.remove('flipped');
        }, 1000);
    }

    createConfetti(card) {
        const rect = card.getBoundingClientRect();
        for (let i = 0; i < 5; i++) {
            const confetti = document.createElement('div');
            confetti.className = 'confetti';
            confetti.style.left = `${rect.left + Math.random() * rect.width}px`;
            confetti.style.top = `${rect.top}px`;
            document.body.appendChild(confetti);
            
            confetti.addEventListener('animationend', () => confetti.remove());
        }
    }

    startTimer() {
        this.startTime = Date.now();
        this.timerInterval = setInterval(() => {
            const elapsed = Math.floor((Date.now() - this.startTime) / 1000);
            const minutes = Math.floor(elapsed / 60).toString().padStart(2, '0');
            const seconds = (elapsed % 60).toString().padStart(2, '0');
            document.getElementById('timer').textContent = `${minutes}:${seconds}`;
        }, 1000);
    }

    updateStats() {
        document.getElementById('moves').textContent = this.moves;
        document.getElementById('points').textContent = this.points;
    }

    async gameComplete() {
        // Stop the timer
        clearInterval(this.timerInterval);
        const finalTime = document.getElementById('timer').textContent;
        
        // Update modal content
        document.getElementById('finalMoves').textContent = this.moves;
        document.getElementById('finalTime').textContent = finalTime;
        document.getElementById('finalPoints').textContent = this.points;

        // Save high score and update progress if user is logged in
        const token = localStorage.getItem('token');
        if (token) {
            await this.saveScore(token);
            await this.updateProgress(token);
        }

        // Show victory modal with modified buttons
        const victoryModal = new bootstrap.Modal(document.getElementById('victoryModal'));
        victoryModal.show();

        // After 3 seconds, redirect to home
        setTimeout(() => {
            window.location.href = '/';
        }, 3000);
    }

    async updateProgress(token) {
        try {
            const response = await fetch('/api/game/updateGameProgress', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            
            if (!response.ok) {
                console.error('Failed to update game progress');
            }
        } catch (error) {
            console.error('Error updating game progress:', error);
        }
    }

    async saveScore(token) {
        try {
            const response = await fetch('/api/game/saveGameScore', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({
                    game: 'coupon-match',
                    score: this.points,
                    moves: this.moves,
                    time: document.getElementById('timer').textContent
                })
            });
            
            if (!response.ok) {
                console.error('Failed to save score');
            }
        } catch (error) {
            console.error('Error saving score:', error);
        }
    }

    attachEventListeners() {
        const startButton = document.getElementById('startGame');
        const playAgainButton = document.getElementById('playAgain');

        startButton.addEventListener('click', async () => {
            const canPlay = await this.checkCooldown();
            if (canPlay) {
                this.initializeGame();
            }
        });

        playAgainButton.addEventListener('click', async () => {
            const canPlay = await this.checkCooldown();
            if (canPlay) {
                const modal = bootstrap.Modal.getInstance(document.getElementById('victoryModal'));
                modal.hide();
                this.initializeGame();
            }
        });
    }

    async checkCooldown() {
        const startButton = document.getElementById('startGame');
        const token = localStorage.getItem('token');
        
        // If no token, enable the game for non-logged-in users
        if (!token) {
            startButton.disabled = false;
            startButton.textContent = 'Start New Game';
            return true;
        }

        try {
            const response = await fetch('/api/game/checkGameProgress', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            
            if (!response.ok) {
                throw new Error('Failed to check game progress');
            }

            const data = await response.json();
            
            // If user can play (either no progress or cooldown passed)
            if (data.canPlay) {
                startButton.disabled = false;
                startButton.textContent = 'Start New Game';
                return true;
            }
            
            // User cannot play yet, show countdown
            const nextAvailablePlay = new Date(data.nextAvailablePlay);
            const now = new Date();
            const timeDiff = nextAvailablePlay - now;
            
            // Calculate remaining hours and minutes
            const hoursRemaining = Math.floor(timeDiff / (60 * 60 * 1000));
            const minutesRemaining = Math.floor((timeDiff % (60 * 60 * 1000)) / (60 * 1000));
            
            startButton.disabled = true;
            startButton.textContent = hoursRemaining > 0 ? 
                `Available in ${hoursRemaining}h ${minutesRemaining}m` : 
                `Available in ${minutesRemaining} minutes`;
            
            return false;
            
        } catch (error) {
            console.error('Error checking game progress:', error);
            // In case of error, enable the game
            startButton.disabled = false;
            startButton.textContent = 'Start New Game';
            return true;
        }
    }
}

// Initialize game when document is ready
document.addEventListener('DOMContentLoaded', () => {
    new CouponMatchGame();
});
</script> 