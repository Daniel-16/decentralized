<%- include('../partials/home/header') %>

<style>
.game-container {
    max-width: 800px;
    margin: 40px auto;
    padding: 20px;
}

.game-board {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 10px;
    margin: 20px 0;
    perspective: 1000px;
}

.card {
    position: relative;
    height: 150px;
    transform-style: preserve-3d;
    transition: transform 0.5s;
    cursor: pointer;
}

.card.flipped {
    transform: rotateY(180deg);
}

.card-face {
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.card-front {
    background: linear-gradient(45deg, #6366f1, #8b5cf6);
    transform: rotateY(180deg);
}

.card-back {
    background: linear-gradient(45deg, #f472b6, #ec4899);
}

.card-content {
    text-align: center;
    color: white;
    padding: 10px;
}

.card-content img {
    width: 10rem;
    height: 10rem;
    object-fit: contain;
    margin-bottom: 5px;
}

.game-stats {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
    font-size: 1.2em;
}

.game-controls {
    text-align: center;
    margin: 20px 0;
}

.confetti {
    position: fixed;
    width: 10px;
    height: 10px;
    background-color: #f472b6;
    animation: fall 3s linear forwards;
    z-index: 1000;
}

@keyframes fall {
    to {
        transform: translateY(100vh) rotate(360deg);
    }
}

.modal-content {
    background: linear-gradient(135deg, #6366f1, #8b5cf6);
    color: white;
}

.modal-header {
    border-bottom: 1px solid rgba(255,255,255,0.1);
}

.modal-footer {
    border-top: 1px solid rgba(255,255,255,0.1);
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    margin-top: 1rem;
}

.stat-item {
    text-align: center;
    padding: 1rem;
    border-radius: 10px;
    background: linear-gradient(145deg, #f8f9fa, #ffffff);
    box-shadow: 0 2px 6px rgba(0,0,0,0.05);
    transition: transform 0.3s ease;
}

.stat-item:hover {
    transform: translateY(-3px);
}

.stat-icon {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
}

.stat-value {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 0.25rem;
    color: #1f0757;
}

.stat-label {
    font-size: 0.875rem;
    color: #8480ae;
    font-weight: 500;
}

@media (max-width: 768px) {
    .stats-grid {
        gap: 0.5rem;
    }
    
    .stat-item {
        padding: 0.75rem;
    }
    
    .stat-value {
        font-size: 1.25rem;
    }
}
</style>

<div class="breadcrumb-wrapper">
    <div class="container">
        <div class="breadcrumb-content">
            <h2 class="breadcrumb-title">Coupon Match</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb justify-content-center">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item active">Coupon Match Game</li>
                </ol>
            </nav>
        </div>
    </div>
</div>

<div class="game-container">
    <div class="row g-4 mb-4">
        <!-- Current Game Stats -->
        <div class="col-12 col-md-6">
            <div class="card border-0 shadow-sm">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center mb-3">
                        <i class="bi bi-controller text-primary me-2" style="font-size: 1.5rem;"></i>
                        <h5 class="mb-0">Current Game</h5>
                    </div>
                    <div class="d-flex justify-content-between">
                        <div class="text-center">
                            <p class="text-muted mb-1">Moves</p>
                            <h3 class="mb-0" id="moves">0</h3>
                        </div>
                        <div class="text-center">
                            <p class="text-muted mb-1">Points</p>
                            <h3 class="mb-0" id="points">0</h3>
                        </div>
                        <div class="text-center">
                            <p class="text-muted mb-1">Time</p>
                            <h3 class="mb-0" id="timer">00:00</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Previous Game Stats -->
        <!-- <div class="col-12 col-md-6">
            <div class="card border-0 shadow-sm">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center mb-3">
                        <i class="bi bi-trophy text-warning me-2" style="font-size: 1.5rem;"></i>
                        <h5 class="mb-0">Previous Game</h5>
                    </div>
                    <div class="d-flex justify-content-between">
                        <div class="text-center">
                            <p class="text-muted mb-1">Moves</p>
                            <h3 class="mb-0" id="lastMoves">-</h3>
                        </div>
                        <div class="text-center">
                            <p class="text-muted mb-1">Points</p>
                            <h3 class="mb-0" id="lastPoints">-</h3>
                        </div>
                        <div class="text-center">
                            <p class="text-muted mb-1">Time</p>
                            <h3 class="mb-0" id="lastTime">-</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div> -->
    </div>
    
    <div class="game-controls">
        <button class="btn btn-primary rounded-pill" id="startGame">Start New Game</button>
    </div>

    <div class="game-board" id="gameBoard"></div>
</div>

<!-- Victory Modal -->
<div class="modal fade" id="victoryModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Congratulations! üéâ</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>You've completed the Coupon Match game!</p>
                <p>Moves: <span id="finalMoves">0</span></p>
                <p>Time: <span id="finalTime">00:00</span></p>
                <p>Points Earned: <span id="finalPoints">0</span></p>
                <p class="mt-3">Come back tomorrow to play again!</p>
                <p>Returning to home in <span id="countdownTimer">3</span> seconds...</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="window.location.href='/'">Return Home</button>
            </div>
        </div>
    </div>
</div>

<!-- Moves Limit Modal -->
<div class="modal fade" id="movesLimitModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Game Over! ‚è±Ô∏è</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>You've reached the maximum number of moves (12)!</p>
                <p>Moves: <span id="limitMoves">0</span></p>
                <p>Time: <span id="limitTime">00:00</span></p>
                <p>Points Earned: <span id="limitPoints">0</span></p>
                <p class="mt-3">Come back tomorrow to play again!</p>
                <p>Returning to home in <span id="limitCountdownTimer">3</span> seconds...</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="window.location.href='/'">Return Home</button>
            </div>
        </div>
    </div>
</div>

<%- include('../partials/home/footer') %>

<script>
    class CouponMatchGame {
        constructor() {
            this.moves = 0;
            this.points = 0;
            this.startTime = null;
            this.timerInterval = null;
            this.flippedCards = [];
            this.matchedPairs = 0;
            this.isLocked = false;
            this.maxMoves = 12; // Changed from 16 to 12
            
            // Coupon types for the game
            this.couponTypes = [
                { name: 'UNQ', image: '/assets/img/parachains/unique1.png', color: '#f472b6' },
                { name: 'Unique', image: '/assets/img/parachains/unique22.png', color: '#8b5cf6' },
                { name: 'Moonbeam', image: '/assets/img/parachains/moonbeam1.jpg', color: '#f59e0b' },
                { name: 'You-Moonbeam', image: '/assets/img/parachains/moonbeam2.png', color: '#10b981' },
                { name: 'Acala', image: '/assets/img/parachains/acala1.png', color: '#6366f1' },
                { name: 'You-Acala', image: '/assets/img/parachains/acala3.png', color: '#ef4444' },
                { name: 'Polkadot', image: '/assets/img/parachains/polkadot1.png', color: '#14b8a6' },
                { name: 'You-Polkadot', image: '/assets/img/parachains/polkadot2.png', color: '#f97316' }
            ];
            
            this.checkCooldown();
            this.attachEventListeners();
            this.loadPreviousGameStats();
        }
    
        initializeGame() {
            this.gameBoard = document.getElementById('gameBoard');
            this.moves = 0;
            this.points = 0;
            this.matchedPairs = 0;
            this.updateStats();
            this.createBoard();
            this.startTimer();
        }
    
        createBoard() {
            this.gameBoard.innerHTML = '';
            const shuffledCoupons = [...this.couponTypes, ...this.couponTypes]
                .sort(() => Math.random() - 0.5);
    
            shuffledCoupons.forEach((coupon, index) => {
                const card = this.createCard(coupon, index);
                this.gameBoard.appendChild(card);
            });
        }
    
        createCard(coupon, index) {
            const card = document.createElement('div');
            card.className = 'card';
            card.dataset.index = index;
            card.dataset.name = coupon.name;
    
            card.innerHTML = `
                <div class="card-face card-front">
                    <div class="card-content">
                        <img src="${coupon.image}" alt="${coupon.name}" style="width: 80px; height: 80px;">
                        <div>${coupon.name}</div>
                    </div>
                </div>
                <div class="card-face card-back">
                    <div class="card-content">
                        <img src="/assets/img/koopon-logo.png" alt="KooponCraft">
                    </div>
                </div>
            `;
    
            card.addEventListener('click', () => this.flipCard(card));
            return card;
        }
    
        flipCard(card) {
            if (this.isLocked || card.classList.contains('flipped') || 
                this.flippedCards.includes(card)) return;
    
            card.classList.add('flipped');
            this.flippedCards.push(card);
    
            if (this.flippedCards.length === 2) {
                this.moves++;
                this.updateStats();
                this.checkMatch();
                
                // Check if moves limit reached immediately after updating moves
                if (this.moves >= this.maxMoves) {
                    setTimeout(() => this.movesLimitReached(), 1000); // Add delay to allow last match animation
                }
            }
        }
    
        checkMatch() {
            this.isLocked = true;
            const [card1, card2] = this.flippedCards;
            const match = card1.dataset.name === card2.dataset.name;
    
            if (match) {
                this.handleMatch(card1, card2);
            } else {
                this.handleMismatch(card1, card2);
            }
    
            this.flippedCards = [];
            
            // Keep isLocked true if we're at max moves
            if (this.moves >= this.maxMoves) {
                this.isLocked = true;
            } else {
                this.isLocked = false;
            }
        }
    
        handleMatch(card1, card2) {
            this.matchedPairs++;
            this.points += 100;
            this.updateStats();
            
            this.createConfetti(card1);
            this.createConfetti(card2);
    
            if (this.matchedPairs === this.couponTypes.length) {
                // Keep the victory check, but make sure it doesn't run if we're at max moves
                if (this.moves < this.maxMoves) {
                    setTimeout(() => this.gameComplete(), 500);
                }
            }
        }
    
        handleMismatch(card1, card2) {
            setTimeout(() => {
                card1.classList.remove('flipped');
                card2.classList.remove('flipped');
            }, 1000);
        }
    
        createConfetti(card) {
            const rect = card.getBoundingClientRect();
            for (let i = 0; i < 5; i++) {
                const confetti = document.createElement('div');
                confetti.className = 'confetti';
                confetti.style.left = `${rect.left + Math.random() * rect.width}px`;
                confetti.style.top = `${rect.top}px`;
                document.body.appendChild(confetti);
                
                confetti.addEventListener('animationend', () => confetti.remove());
            }
        }
    
        startTimer() {
            this.startTime = Date.now();
            this.timerInterval = setInterval(() => {
                const elapsed = Math.floor((Date.now() - this.startTime) / 1000);
                const minutes = Math.floor(elapsed / 60).toString().padStart(2, '0');
                const seconds = (elapsed % 60).toString().padStart(2, '0');
                document.getElementById('timer').textContent = `${minutes}:${seconds}`;
            }, 1000);
        }
    
        updateStats() {
            document.getElementById('moves').textContent = this.moves;
            document.getElementById('points').textContent = this.points;
        }
    
        // Completely rewritten to ensure it works for all users
        async movesLimitReached() {
            console.log("Move limit reached! Showing modal...");
            
            // Stop the timer
            clearInterval(this.timerInterval);
            
            // Get final time
            const finalTime = document.getElementById('timer').textContent;
            
            // Update modal content
            document.getElementById('limitMoves').textContent = this.moves;
            document.getElementById('limitTime').textContent = finalTime;
            document.getElementById('limitPoints').textContent = this.points;
    
            // Save score for logged in users only
            const token = localStorage.getItem('token');
            if (token) {
                try {
                    await this.saveScore(token);
                    await this.updateProgress(token);
                } catch (error) {
                    console.error("Error saving game data:", error);
                }
            }
    
            // Force a small delay to ensure modal shows after any animations
            setTimeout(() => {
                try {
                    // Show moves limit modal using Bootstrap's API
                    const movesLimitModal = new bootstrap.Modal(document.getElementById('movesLimitModal'));
                    movesLimitModal.show();
                    
                    // Start countdown
                    let countdown = 3;
                    const countdownElement = document.getElementById('limitCountdownTimer');
                    countdownElement.textContent = countdown.toString();
                    
                    const countdownInterval = setInterval(() => {
                        countdown--;
                        countdownElement.textContent = countdown.toString();
                        
                        if (countdown <= 0) {
                            clearInterval(countdownInterval);
                            window.location.href = '/';
                        }
                    }, 1000);
                } catch (e) {
                    console.error("Error showing modal:", e);
                    // Fallback if modal fails
                    alert("Game over! You've reached the maximum number of moves (12).");
                    window.location.href = '/';
                }
            }, 500);
        }
    
        async gameComplete() {
            // Stop the timer
            clearInterval(this.timerInterval);
            const finalTime = document.getElementById('timer').textContent;
            
            // Update modal content
            document.getElementById('finalMoves').textContent = this.moves;
            document.getElementById('finalTime').textContent = finalTime;
            document.getElementById('finalPoints').textContent = this.points;
    
            // Save high score and update progress if user is logged in
            const token = localStorage.getItem('token');
            if (token) {
                await this.saveScore(token);
                await this.updateProgress(token);
            }
    
            // Show victory modal with countdown
            setTimeout(() => {
                const victoryModal = new bootstrap.Modal(document.getElementById('victoryModal'));
                victoryModal.show();
                
                // Start countdown
                let countdown = 3;
                const countdownElement = document.getElementById('countdownTimer');
                countdownElement.textContent = countdown.toString();
                
                const countdownInterval = setInterval(() => {
                    countdown--;
                    countdownElement.textContent = countdown.toString();
                    
                    if (countdown <= 0) {
                        clearInterval(countdownInterval);
                        window.location.href = '/';
                    }
                }, 1000);
            }, 500);
        }
    
        async updateProgress(token) {
            try {
                // Set the cooldown period to 24 hours
                const response = await fetch('/api/game/updateGameProgress', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({
                        cooldownHours: 24 // Explicitly set 24-hour cooldown
                    })
                });
                
                if (!response.ok) {
                    console.error('Failed to update game progress');
                }
            } catch (error) {
                console.error('Error updating game progress:', error);
            }
        }
    
        async saveScore(token) {
            try {
                const gameData = {
                    game: 'coupon-match',
                    score: this.points,
                    moves: this.moves,
                    time: document.getElementById('timer').textContent
                };
                
                console.log('Saving game score:', gameData);
                
                const response = await fetch('/api/game/saveGameScore', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(gameData)
                });
                
                if (!response.ok) {
                    throw new Error('Failed to save score');
                }
                
                const data = await response.json();
                console.log('Save score response:', data);
                
                // Reload previous game stats after saving
                await this.loadPreviousGameStats();
            } catch (error) {
                console.error('Error saving score:', error);
            }
        }
    
        attachEventListeners() {
            const startButton = document.getElementById('startGame');
    
            startButton.addEventListener('click', async () => {
                const canPlay = await this.checkCooldown();
                if (canPlay) {
                    this.initializeGame();
                }
            });
        }
    
        async checkCooldown() {
            const startButton = document.getElementById('startGame');
            const token = localStorage.getItem('token');
            
            // If no token, enable the game for non-logged-in users.
            if (!token) {
                startButton.disabled = false;
                startButton.textContent = 'Start New Game';
                return true;
            }
    
            try {
                const response = await fetch('/api/game/checkGameProgress', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                if (!response.ok) {
                    throw new Error('Failed to check game progress');
                }
    
                const data = await response.json();
                
                // If user can play (either no progress or cooldown passed)
                if (data.canPlay) {
                    startButton.disabled = false;
                    startButton.textContent = 'Start New Game';
                    return true;
                }
                
                // User cannot play yet, show countdown
                const nextAvailablePlay = new Date(data.nextAvailablePlay);
                const now = new Date();
                const timeDiff = nextAvailablePlay - now;
                
                // Calculate remaining hours and minutes
                const hoursRemaining = Math.floor(timeDiff / (60 * 60 * 1000));
                const minutesRemaining = Math.floor((timeDiff % (60 * 60 * 1000)) / (60 * 1000));
                
                startButton.disabled = true;
                startButton.textContent = hoursRemaining > 0 ? 
                    `Available in ${hoursRemaining}h ${minutesRemaining}m` : 
                    `Available in ${minutesRemaining} minutes`;
                
                return false;
                
            } catch (error) {
                console.error('Error checking game progress:', error);
                // In case of error, enable the game
                startButton.disabled = false;
                startButton.textContent = 'Start New Game';
                return true;
            }
        }
    
        async loadPreviousGameStats() {
            const token = localStorage.getItem('token');
            if (!token) {
                console.log('No token found');
                return;
            }
    
            try {
                console.log('Fetching game progress...');
                const response = await fetch('/api/game/checkGameProgress', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                if (!response.ok) throw new Error('Failed to fetch game progress');
                
                const data = await response.json();            
                        
                if (data.lastGameStats) {
                    const lastStatsElements = document.querySelectorAll('#lastMoves, #lastPoints, #lastTime');
                    if (lastStatsElements.length > 0) {
                        document.getElementById('lastMoves').textContent = data.lastGameStats.moves;
                        document.getElementById('lastPoints').textContent = data.lastGameStats.score;
                        document.getElementById('lastTime').textContent = data.lastGameStats.time;
                    }
                } else {
                    console.log('No previous game stats found');
                    const lastStatsElements = document.querySelectorAll('#lastMoves, #lastPoints, #lastTime');
                    if (lastStatsElements.length > 0) {
                        document.getElementById('lastMoves').textContent = '-';
                        document.getElementById('lastPoints').textContent = '-';
                        document.getElementById('lastTime').textContent = '-';
                    }
                }
            } catch (error) {
                console.error('Error loading previous game stats:', error);
                const lastStatsElements = document.querySelectorAll('#lastMoves, #lastPoints, #lastTime');
                if (lastStatsElements.length > 0) {
                    document.getElementById('lastMoves').textContent = '-';
                    document.getElementById('lastPoints').textContent = '-';
                    document.getElementById('lastTime').textContent = '-';
                }
            }
        }
    }
    
    // Initialize game when document is ready
    document.addEventListener('DOMContentLoaded', () => {
        new CouponMatchGame();
    });
</script>