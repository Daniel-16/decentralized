<%- include('../partials/home/header') %>

<!-- Breadcrumb -->
<div class="breadcrumb-wrapper">
  <div class="container">
    <div class="breadcrumb-content">
      <h2 class="breadcrumb-title">Register</h2>
      <nav aria-label="breadcrumb">
        <ol class="breadcrumb justify-content-center">
          <li class="breadcrumb-item"><a href="/">Home</a></li>
          <li class="breadcrumb-item active" aria-current="page">Register</li>
        </ol>
      </nav>
    </div>
  </div>
</div>
<div class="divider"></div>
<!-- Register -->
<div class="register-area">
  <div class="container">
    <div class="row g-4 g-lg-5 align-items-center justify-content-between">
      <div class="col-12 col-md-6 col-xl-5">
        <div class="register-card">
          <h2>Create your free account</h2>
          <p>
            Already have an account?<a class="ms-1 hover-primary" href="/login"
              >Log In</a
            >
          </p>
          <!-- Register Form-->
          <div class="register-form mt-5">
            <form id="registerUserForm">
              <div class="form-group mb-4">
                <input
                  class="form-control"
                  id="email"
                  type="email"
                  placeholder="Email"
                  required
                />
              </div>
              <div class="form-group mb-4">
                <input
                  class="form-control"
                  id="username"
                  type="text"
                  placeholder="Username"
                  required
                />
              </div>
              <!-- <div class="form-group mb-4">
                <input class="form-control" type="text" placeholder="Full Name" required>
                </div> -->
              <div class="form-group mb-4">
                <label class="label-psswd" for="registerPassword">Show</label>
                <input
                  class="form-control"
                  id="registerPassword"
                  type="password"
                  placeholder="Password"
                  required
                />
              </div>
              <div class="form-check mb-4">
                <input
                  class="form-check-input"
                  id="rememberMe"
                  type="checkbox"
                  value=""
                  checked
                />
                <label class="form-check-label" for="rememberMe"
                  >I agree to all terms &amp; conditions.</label
                >
              </div>

              <button class="btn btn-primary w-100" type="submit">
                Register Now
              </button>
            </form>
          </div>
          <!-- Add Polkadot Wallet Login Option -->
          <div class="text-center mt-3">Or connect with</div>
          <button
            class="btn btn-primary w-100 mt-3"
            id="connectPolkadotWallet"
            type="button"
            onclick="connectPolkadot()"
          >
            Polkadot Wallet
          </button>
          <!-- Add SubWallet Login Option -->
          <div class="text-center mt-3">Or connect with</div>
          <button
            class="btn btn-primary w-100 mt-3"
            id="connectSubWallet"
            type="button"
            onclick="connectSubWallet()"
          >
            SubWallet
          </button>
        </div>
      </div>
      <div class="col-12 col-md-6">
        <div class="register-thumbnail mt-5 mt-md-0">
          <img src="/assets/img/illustrator/4.png" alt="" />
        </div>
      </div>
    </div>
  </div>
</div>
<div class="divider"></div>
<!-- Dark Light Wrapper -->
<div
  class="dark-light-wrapper"
  data-aos="zoom-in"
  data-aos-duration="750"
  data-aos-delay="200"
>
  <div class="container">
    <div class="d-flex align-items-center justify-content-between">
      <h5
        class="mb-0 text-white"
        data-aos="fade-up"
        data-aos-duration="750"
        data-aos-delay="500"
      >
        Light mode is available!
      </h5>
      <!-- Switch -->
      <div
        class="dark-light-mode"
        data-aos="fade-up"
        data-aos-duration="750"
        data-aos-delay="800"
      >
        <input id="darkLightSwitch" type="checkbox" />
        <label class="shadow" for="darkLightSwitch">Toggle</label>
      </div>
    </div>
  </div>
</div>

<!-- modal for transfer Token -->
<div
  class="modal fade"
  id="mnemonicModal"
  tabindex="-1"
  aria-labelledby="mnemonicModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="mnemonicModalLabel">
          Copy and Store your mnemonic safely.
        </h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <p class="text-warning">
            Your mnemonic is a secret phrase that gives you access to your
            wallet and funds. Never share it with anyone and store it securely
            offline.
          </p>
          <label for="mnemonic" class="form-label">Mnemonic:</label>
          <textarea id="mnemonicText" class="form-control" readonly></textarea>
        </div>

        <button id="copyMnemonicBtn" class="btn btn-primary w-100 mb-3">
          Copy Mnemonic
        </button>
        <button id="mnemonicModalCloseBtn" class="btn btn-danger w-100">
          Close
        </button>
      </div>
    </div>
  </div>
</div>
<!-- end:modal for transfer -->

<%- include('../partials/home/footer') %>

<script>
  $(document).ready(function () {
    $("#registerUserForm").on("submit", function (event) {
      event.preventDefault();

      const email = $("#email").val();
      const username = $("#username").val();
      const password = $("#registerPassword").val();

      const loginButton = $("button[type=submit]");
      loginButton.prop("disabled", true).text("Please wait...");

      $.ajax({
        url: "/api/createUser",
        method: "POST",
        contentType: "application/json",
        data: JSON.stringify({ username, email, password }),
        success: function (response) {
          // console.log(response);
          if (response.success) {
            localStorage.setItem("token", response.token);
            localStorage.setItem("username", response.user.username);
            localStorage.setItem("email", response.user.email);
            localStorage.setItem(
              "profileImageUrl",
              response.user.profileImageUrl
            );
            localStorage.setItem("accountAddress", response.account.address);
            localStorage.setItem(
              "hasReceivedToken",
              response.user.hasReceivedToken
            );

            $("#mnemonicText").val(response.mnemonic);

            $("#mnemonicModal").modal("show");
            toastr.success("Registration Successful!");
            // Swal.fire({
            //     position: "center",
            //     icon: "success",
            //     title: "Registration Successful",
            //     showConfirmButton: false,
            //     timer: 1500,
            // });
          } else {
            Swal.fire({
              position: "center",
              icon: "error",
              title: "Oops...",
              showConfirmButton: false,
              timer: 1500,
              text: response.error || "An error occurred",
            });
          }
        },
        error: function (jqXHR) {
          toastr.info(jqXHR.responseJSON?.error || "An error occurred");
        },
        complete: function () {
          loginButton.prop("disabled", false).text("Register Now");
        },
      });
    });

    // copy mnemonic to clipboard
    $("#copyMnemonicBtn").on("click", function () {
      const mnemonicText = $("#mnemonicText");
      mnemonicText.select();
      document.execCommand("copy");
      toastr.success("Mnemonic copied to clipboard!");

      // slight delay to ensure that the toastr is shown before redirect
      // setTimeout(function () {
      //     location.assign("/");
      // }, 1500);
    });

    // close modal
    $("#mnemonicModalCloseBtn, .btn-close").on("click", function () {
      $("#mnemonicModal").modal("hide");
      location.assign("/");
    });
  });
</script>

<!-- Connect to Polkadot wallet -->
<script>
  async function connectPolkadot() {
    if (!window.injectedWeb3) {
      Swal.fire({
        title: "Polkadot Extension Not Found",
        text: "Please install the Polkadot.js extension first",
        icon: "warning",
        confirmButtonText: "Install Extension",
        showCancelButton: true,
      }).then((result) => {
        if (result.isConfirmed) {
          window.open("https://polkadot.js.org/extension/", "_blank");
        }
      });
      return;
    }

    try {
      await new Promise((resolve) => setTimeout(resolve, 100));
      const allInjected = await window.injectedWeb3;

      // Get all available extensions
      const availableWallets = Object.keys(allInjected);
      console.log("Available wallets:", availableWallets);

      // Default to polkadot-js if available, otherwise use the first available
      let selectedWallet = "polkadot-js";
      if (!allInjected[selectedWallet] && availableWallets.length > 0) {
        selectedWallet = availableWallets[0];
      }

      const injected = allInjected[selectedWallet];
      if (!injected) {
        throw new Error("No compatible Polkadot wallet extension found");
      }

      const extension = await injected.enable("KooponCraft");
      const accounts = await extension.accounts.get();

      if (!accounts || accounts.length === 0) {
        Swal.fire({
          title: "No Accounts Found",
          text: "Please create or import an account in your Polkadot wallet extension first",
          icon: "warning",
          confirmButtonText: "Open Extension",
          showCancelButton: true,
        });
        return;
      }

      const account = accounts[0];
      console.log("Account metadata:", account.meta);

      // IMPORTANT: For walletType, we prioritize the network over the extension type
      // This ensures Acala accounts are identified as "Acala" even if using Polkadot.js
      const networkType = determineNetworkFromAccount(account);
      
      let walletType = networkType;
      if (
        networkType === "Unknown" ||
        networkType === "Polkadot" ||
        networkType === "Kusama"
      ) {
        walletType = determineWalletType(selectedWallet, allInjected);
      }

      console.log("Detected network:", networkType);
      console.log("Final wallet type for storage:", walletType);

      // Call login API with wallet address and wallet type
      $.ajax({
        url: "/api/createUserWithPolkadot",
        method: "POST",
        contentType: "application/json",
        data: JSON.stringify({
          address: account.address,
          username: account.name || account.meta.name,
          walletType: walletType, // This will be "Acala" for Acala accounts
          networkType: networkType,
        }),
        success: function (response) {
          if (response.success) {
            localStorage.setItem("token", response.token);
            localStorage.setItem("username", response.user.username);
            localStorage.setItem(
              "accountAddress",
              response.user.accountAddress
            );
            localStorage.setItem(
              "hasReceivedToken",
              response.user.hasReceivedToken
            );
            localStorage.setItem("currentStreak", response.user.currentStreak);
            localStorage.setItem("highestStreak", response.user.highestStreak);
            localStorage.setItem(
              "profileImageUrl",
              response.user.profileImageUrl
            );
            localStorage.setItem("walletType", walletType); // Store specialized wallet type

            Swal.fire({
              title: "Success!",
              text: `Successfully created account with ${walletType} wallet`,
              icon: "success",
              timer: 1500,
            });

            location.assign("/dashboard");
          } else {
            Swal.fire({
              title: "Error",
              text: response.error || "Failed to create account",
              icon: "error",
            });
          }
        },
        error: function (jqXHR) {
          Swal.fire({
            title: "Error",
            text: jqXHR.responseJSON?.error || "Failed to create account",
            icon: "error",
          });
        },
      });
    } catch (error) {
      console.error("Polkadot connection error:", error);
      Swal.fire({
        title: "Connection Error",
        text: error.message,
        icon: "error",
      });
    }
  }

  function determineWalletType(injectedKey, allInjected) {
    // Map of known wallet extension identifiers to friendly names
    const walletMapping = {
      "polkadot-js": "Polkadot.js",
      talisman: "Talisman",
      "subwallet-js": "SubWallet",
      nova: "Nova Wallet",
      fearless: "Fearless Wallet",
      mathwallet: "Math Wallet",
      clover: "Clover",
      polkagate: "PolkaGate",
      pontem: "Pontem",
    };

    return walletMapping[injectedKey] || injectedKey;
  }

  function determineNetworkFromAccount(account) {
    if (account.address) {
      const SS58_ACALA = 10;
      try {
      } catch (e) {
        console.log("Address format check error:", e);
      }
    }

    // Check for network in the account's meta fields
    if (account.meta) {      
      if (
        account.meta.network === "acala" ||
        (account.meta.name && account.meta.name.toLowerCase().includes("acala"))
      ) {
        return "Acala";
      }
      
      if (account.meta.genesisHash) {
        return determineNetworkFromGenesis(account.meta.genesisHash);
      }
    }

    return "Unknown";
  }

  function determineNetworkFromGenesis(genesisHash) {    
    const genesisMapping = {
      // Polkadot mainnet
      "0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3":
        "Polkadot",
      // Kusama
      "0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe":
        "Kusama",
      // Acala mainnet
      "0xfc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c":
        "Acala",
      // Acala testnet (Mandala)
      "0x0000000000000000000000000000000000000000000000000000000000000000":
        "Acala",
      // Karura (Acala's Kusama deployment)
      "0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b":
        "Karura",
      "0x9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6":
        "Astar",
      "0xfe58ea77779b7abda7da4ec526d14db9b1e9cd40a217c34892af80a9b332b76d":
        "Moonbeam",
    };

    return genesisMapping[genesisHash] || "Unknown";
  }

  // Function to check all accounts for debugging (optional)
  async function scanAllAccounts() {
    const allInjected = await window.injectedWeb3;
    const selectedWallet = "polkadot-js";
    const injected = allInjected[selectedWallet];

    if (!injected) return;

    const extension = await injected.enable("KooponCraft");
    const accounts = await extension.accounts.get();

    console.log("All accounts:");
    accounts.forEach((acc, index) => {
      console.log(`Account ${index}:`, acc.address);
      console.log(`- Name: ${acc.name || "unnamed"}`);
      console.log(`- Network from metadata:`, determineNetworkFromAccount(acc));
      if (acc.meta && acc.meta.genesisHash) {
        console.log(`- Genesis hash: ${acc.meta.genesisHash}`);
      }
    });
  }

  $(document).ready(function () {
    $("#connectPolkadotWallet").on("click", connectPolkadot);
  });
</script>

<script>
  async function connectSubWallet() {
    if (!window.injectedWeb3) {
      Swal.fire({
        title: "SubWallet Extension Not Found",
        text: "Please install the SubWallet extension first",
        icon: "warning",
        confirmButtonText: "Install Extension",
        showCancelButton: true,
      }).then((result) => {
        if (result.isConfirmed) {
          window.open("https://subwallet.app/", "_blank");
        }
      });
      return;
    }

    try {
      await new Promise((resolve) => setTimeout(resolve, 100));
      const allInjected = await window.injectedWeb3;

      // Check if SubWallet is available
      const selectedWallet = "subwallet-js";
      const injected = allInjected[selectedWallet];
      if (!injected) {
        throw new Error("No compatible SubWallet extension found");
      }

      const extension = await injected.enable("KooponCraft");
      const accounts = await extension.accounts.get();

      if (!accounts || accounts.length === 0) {
        Swal.fire({
          title: "No Accounts Found",
          text: "Please create or import an account in your SubWallet extension first",
          icon: "warning",
          confirmButtonText: "Open Extension",
          showCancelButton: true,
        });
        return;
      }

      const account = accounts[0];
      console.log("Account metadata:", account.meta);

      const networkType = determineNetworkFromAccount(account);
      let walletType = networkType;
      if (
        networkType === "Unknown" ||
        networkType === "Polkadot" ||
        networkType === "Kusama"
      ) {
        walletType = determineWalletType(selectedWallet, allInjected);
      }

      console.log("Detected network:", networkType);
      console.log("Final wallet type for storage:", walletType);

      $.ajax({
        url: "/api/createUserWithSubWallet",
        method: "POST",
        contentType: "application/json",
        data: JSON.stringify({
          address: account.address,
          username: account.name || account.meta.name,
          walletType: walletType,
          networkType: networkType,
        }),
        success: function (response) {
          if (response.success) {
            localStorage.setItem("token", response.token);
            localStorage.setItem("username", response.user.username);
            localStorage.setItem(
              "accountAddress",
              response.user.accountAddress
            );
            localStorage.setItem(
              "hasReceivedToken",
              response.user.hasReceivedToken
            );
            localStorage.setItem("currentStreak", response.user.currentStreak);
            localStorage.setItem("highestStreak", response.user.highestStreak);
            localStorage.setItem(
              "profileImageUrl",
              response.user.profileImageUrl
            );
            localStorage.setItem("walletType", walletType);

            Swal.fire({
              title: "Success!",
              text: `Successfully created account with ${walletType} wallet`,
              icon: "success",
              timer: 1500,
            });

            location.assign("/dashboard");
          } else {
            Swal.fire({
              title: "Error",
              text: response.error || "Failed to create account",
              icon: "error",
            });
          }
        },
        error: function (jqXHR) {
          Swal.fire({
            title: "Error",
            text: jqXHR.responseJSON?.error || "Failed to create account",
            icon: "error",
          });
        },
      });
    } catch (error) {
      console.error("SubWallet connection error:", error);
      Swal.fire({
        title: "Connection Error",
        text: error.message,
        icon: "error",
      });
    }
  }

  $(document).ready(function () {
    $("#connectSubWallet").on("click", connectSubWallet);
  });
</script>
